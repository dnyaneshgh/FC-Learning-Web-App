from flask import Flask, request
from flask_restful import Resource, Api
from flasgger import Swagger
import mysql.connector
import obj

app = Flask(__name__)
api = Api(app)
swagger = Swagger(app)

mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="Darshana@1310",
  database="FlashCard"
)


employees_data = [
    {'id': 1, 'name': 'Abhilash Gaurav'},
    {'id': 2, 'name': 'Ramish Verma'}
]
crsr = mydb.cursor()
# GET and POST Request 
class EmployeesResource(Resource):
    def get(self):
        """
        Get a list of all Questions
        ---
        responses:
          200:
            description: A list of Questions
        """
        crsr.execute("SELECT * FROM Questions")
        ans = crsr.fetchall()
        # adding the Function to learn
        return ans, 200
 
    def post(self):
        """
        Add a new Question
        ---
        parameters:
          - in: body
            Question: body
            required: true
            schema:
              id: Employee
              required:
                - Question
              properties:
                Question:
                    type: string
                    description: Question
        responses:
          201:
            description: The added employee
          400:
            description: Bad request
        """
        # Get the last ID and increment to create a new unique ID
        new_id = 2
        data = request.get_json()
        # new_employee = {'id': new_id, 'name': data['Question']}
        # employees_data.append(new_employee)
        #sql_command = """INSERT INTO emp VALUES (2, "{data['Topic']}", "{data['Question']}", "{data['Answer']}", "{data['Hint']}")"""
        sql_command = """INSERT INTO emp VALUES (2, "English", "Who is writter?", "shakespear", "drama: Romeo-Juliet")"""
        crsr.execute(sql_command)
        mydb.commit()

        return {'message': 'Employee not found'}, 201
       
 
# PUT and DELETE Request 
class EmployeeResource(Resource):
    def put(self, employee_id):
        """
        Update an existing employee
        ---
        parameters:
          - in: path
            name: employee_id
            type: integer
            required: true
          - in: body
            name: body
            required: true
            schema:
              id: Employee
              properties:
                name:
                  type: string
                  description: The name of the employee
        responses:
          200:
            description: The updated employee
          404:
            description: Employee not found
        """
        data = request.get_json()
        for employee in employees_data:
            if employee['id'] == employee_id:
                # Update the name of the employee
                employee['name'] = data['name']
                return employee, 200
        return {'message': 'Employee not found'}, 404
 
    def delete(self, employee_id):
        """
        Delete an existing employee
        ---
        parameters:
          - in: path
            name: employee_id
            type: integer
            required: true
        responses:
          200:
            description: Employee deleted successfully
          404:
            description: Employee not found
        """
        for i, employee in enumerate(employees_data):
            if employee['id'] == employee_id:
                # Remove the employee from the list
                deleted_employee = employees_data.pop(i)
                return {'message': 'Employee deleted successfully', 'employee': deleted_employee}, 200
        return {'message': 'Employee not found'}, 404
 
api.add_resource(EmployeesResource, '/employees')
api.add_resource(EmployeeResource, '/employee/<int:employee_id>')
 

if __name__ == '__main__':
	app.run(debug=True)
